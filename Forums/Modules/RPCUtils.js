/*	 * All methods here are used for client side. For server side methods refere to namespace.js*//** This method, verify if the current user is an admin of the forum*/exports.isDataAdmin = function() {		var curSess = currentSession();		if(curSess.user.name === 'dataAdmin'){ // Verify if the name of the logged person is dataAdmin		return true // Then return true	}else{		// Else, we try to look inside the groups array of the storage attribute of the session to look if inside we can fnd the dataAdmin group		try{			for(i=0;i<curSess.storage.groups.length;i++){				if(curSess.storage.groups[i] === 'dataAdmin'){ // If we find the dataAdmin group in the storage attribute					return true // Then we return true				}			}			return false // In other case we return false		}catch(e){			return false // If anny error occurs, we return false		}	}};/** This method is to check if an URL is valid* Parameter : url : is the url to check*/exports.testUrl = function(url){		xhr = new XMLHttpRequest(); // instanciate the xhr object	   	xhr.open('HEAD', url); // Open a HEAD request with the url passed	   	try{		xhr.send(); // send the request				if(xhr.readyState === 4){ // readyState 4 mean the request is send and we get the response						if(xhr.status === 404 || xhr.status === 0){ // If the status is 404 or 0 				return false; // Then we return false			}			if(xhr.status === 200){ // If the status is 200 				return true; // Then whe return true			}else{				return false; // All other status return false			}		}			}catch(e){		return false; // If anny error occurs, we return false	}};// Return the number of user onlineexports.getUserOnlineLength = function(){	var userSessions = getUserSessions();	var alreadyCount = false;	var userNames = [];		for(var i = 0; i < userSessions.length; i++){				alreadyCount = false;				for(var j = 0; j < userNames.length; j++){			if(userNames[j] === userSessions[i].user.fullName){				alreadyCount = true;				break;			}else{				alreadyCount = false;			}		}				if(!alreadyCount){			userNames.push(userSessions[i].user.fullName);		}	}		return userNames.length-1;};// Return the number of guest onlineexports.getGuestOnlineLength = function(){	var userSessions = getUserSessions();	var count = 0;		for(var i = 0; i < userSessions.length; i++){				if(userSessions[i].user.fullName === 'default guest'){			count++;		}	}		return count;};// Return the number of user registered exports.getRegisteredUserLength = function(){	var userLength = ds.User.all().length;		return userLength;};// Getter of the public group IDexports.getPublicGroupID = function(){	var folder = getFolder();	var forumSettingsFile = File(folder.path+"forumSettings/forumSettings.json");	var forumSettings = JSON.parse(forumSettingsFile.toString());		return forumSettings.publicGroupID;}; // ID of the public group// Getter of the validation by email setting (true or false)exports.getValidationByEmail = function(){	var folder = getFolder();	var forumSettingsFile = File(folder.path+"forumSettings/forumSettings.json");	var forumSettings = JSON.parse(forumSettingsFile.toString());		return forumSettings.validationByEmail;}; // Flag to know if the validation is done by email or not// Getter of the forum titleexports.getForumTitle = function(){	var folder = getFolder();	var forumSettingsFile = File(folder.path+"forumSettings/forumSettings.json");	var forumSettings = JSON.parse(forumSettingsFile.toString());		return forumSettings.forumTitle;}; // Get the title of the forum