/******This method allow the user who have the write acces on a forum to create a new topictitle : title of the topicforumID : forum of the id where we want to create the topicmessageContent : the content of the message of the topic******/model.Topic.methods.createTopic = function(title,forumID,messageContent) {		var curSess = currentSession();		if(curSess.user.fullName === 'default guest'){		return {error:64,errorMessage:"You must be logged!"};	}		var forum = ds.Forum.find('ID = :1',forumID);	var promoteToken;	var XBBCode = require('xbbcode');				if(!curSess.belongsTo('Administrateur')){ // If we are not the dataAdmin				try{			promoteToken = curSess.promoteWith('CUD_Topic_Post');						var userAccesses = forum.getUserAccess(curSess.storage.userID);						if(userAccesses !== false){ // If the user have some access for this forum				if(userAccesses.actions.write === true){										var newTopic = ds.Topic.createEntity();								newTopic.title = title;					newTopic.stamp = new Date();					newTopic.forum = ds.Forum(forumID);					newTopic.user = ds.User(curSess.storage.userID);										try{						newTopic.save();					}catch(e){						curSess.unPromote(promoteToken);						return {error:e.sourceId,errorMessage:e.message};					}										var newPost = ds.Post.createEntity();										newPost.title = title;					newPost.content = messageContent;					newPost.contentHTML = XBBCode.process({text:content,removeMisalignedTags: true,addInLineBreaks: true}).html;					newPost.contentText = XBBCode.process({text:content,removeMisalignedTags: false,addInLineBreaks: true},true).html;					newPost.stamp = new Date();					newPost.topic = newTopic;					newPost.user = ds.User(curSess.storage.userID);										try{						newPost.save();						newPost.viewPost();					}catch(e){						curSess.unPromote(promoteToken);						return {error:e.sourceId,errorMessage:e.message};					}				}else{					curSess.unPromote(promoteToken);					return {error:65,errorMessage:"You don't have write access for this forum."};				}					}else{				curSess.unPromote(promoteToken);				return {error:66,errorMessage:"You don't have any access for this forum."};			}						curSess.unPromote(promoteToken);		}catch(e){					}			}else{ // If we are the data Admin			var newTopic = ds.Topic.createEntity();				newTopic.title = title;		newTopic.stamp = new Date();		newTopic.forum = ds.Forum(forumID);		newTopic.user = ds.User(curSess.storage.userID);				try{			newTopic.save();		}catch(e){			return {error:e.sourceId,errorMessage:e.message};		}				var newPost = ds.Post.createEntity();				newPost.title = title;		newPost.content = messageContent;		newPost.contentHTML = XBBCode.process({text:content,removeMisalignedTags: true,addInLineBreaks: true}).html;		newPost.contentText = XBBCode.process({text:content,removeMisalignedTags: false,addInLineBreaks: true},true).html;		newPost.stamp = new Date();		newPost.topic = newTopic;		newPost.user = ds.User(curSess.storage.userID);				try{			newPost.save();		}catch(e){			return {error:e.sourceId,errorMessage:e.message};		}	}		return newTopic;};model.Topic.methods.createTopic.scope = 'public';model.Topic.entityMethods.edit = function(title) {	var curSess = currentSession();		if(curSess.user.fullName === 'default guest'){		return {error:64,errorMessage:"You must be logged!"};	}		var forum = ds.Forum.find('ID = :1',this.forum.ID);	var promoteToken;	var firstPost;		if(!curSess.belongsTo('Administrateur')){ // If we are not the dataAdmin			try{			promoteToken = curSess.promoteWith('CUD_Topic_Post');						firstPost = ds.Post.find('topic.ID == :1 and user.ID == :2 and replyTo == null',this.ID,curSess.storage.userID);						if(forum.hasAccess('modify') === true && ((firstPost.length !== 0 && firstPost.isMyPost() )|| forum.isModerator())){								this.title = title;											try{					this.save();				}catch(e){					curSess.unPromote(promoteToken);					return {error:e.sourceId,errorMessage:e.message};				}							}else{				curSess.unPromote(promoteToken);				return {error:67,errorMessage:"You don't have modify access for this forum."};			}						curSess.unPromote(promoteToken);		}catch(e){					}			}else{ // If we are the data Admin			this.title = title;				try{			this.save();		}catch(e){			return {error:e.sourceId,errorMessage:e.message};		}		}};model.Topic.entityMethods.edit.scope = 'public';model.Topic.entityMethods.close = function(closed) {	try{		var curSess = currentSession();		var promoteToken;				if(this.user.ID === curSess.storage.userID || this.forum.isModerator()){			promoteToken = curSess.promoteWith('CUD_Topic_Post');		}				this.closed = closed;				this.save();				curSess.unPromote(promoteToken);		return true;	}catch(e){		curSess.unPromote(promoteToken);		return e.messages;		}};model.Topic.entityMethods.close.scope = 'public';model.Topic.entityMethods.resolve = function(resolved) {	try{		var curSess = currentSession();		var promoteToken;				if(this.user.ID === curSess.storage.userID || this.forum.isModerator()){			promoteToken = curSess.promoteWith('CUD_Topic_Post');		}				this.resolved = resolved;				this.save();				curSess.unPromote(promoteToken);		return true;	}catch(e){		curSess.unPromote(promoteToken);		return e.messages;		}};model.Topic.entityMethods.resolve.scope = 'public';model.Topic.entityMethods.move = function(newForumID) {	try{		var curSess = currentSession();		var promoteToken;				if(this.forum.ID === newForumID){			return {error:70,errorMessage:'This thread is already inside the choosen forum.'};		}				if(curSess.storage.userID){			if(this.forum.isModerator()){								promoteToken = curSess.promoteWith('CUD_Topic_Post');							this.forum = ds.Forum(newForumID);							this.save();								curSess.unPromote(promoteToken);				return true;			}else{				return {error:68,errorMessage:'You must be a moderator!'};			}								}else{			return {error:64,errorMessage:'You must be logged!'};		}			}catch(e){		curSess.unPromote(promoteToken);		return {error:69,errorMessage:e.message};	}};model.Topic.entityMethods.move.scope = 'public';