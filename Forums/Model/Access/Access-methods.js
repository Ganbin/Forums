/*********************Method allow to create or modify an accces for a group or a userArguments :			createAccess : true,false : flag to say to the function if the call is for creation or modification			groupAccess true,false : flag to say to the function if te call is to create a access for a group or a user			forumID : id of the forum			groupOrUserID : id of the group or the user			actions : exemple : {'read':true,'write':false,'del':false,'modify':false,'vote':true} : object having all the actions for this access			restricted : true,false : to defin if this acces is in restriction mode			statut : string : indication of the access (Member or Moderator)			accessID : the id of the acces to modify (only needed for modification)			Return : 	return true if everything is ok, else return an error *********************/model.Access.methods.createOrModifyAGroupOrUserAccess = function(createAccess,groupAccess,forumID,groupOrUserID,actions,restricted,statut,accessID) {	var actionQuery = '',		access,		resultAction,		newAction;		if(forumID == null || groupOrUserID == null || actions == null || createAccess == null || groupAccess == null || (createAccess == false && accessID == null)){ // Check if all the arguments of the methods are given		return {error:20,errorMessage:'You must give ala the arguments needed to execute correctly this method!'};	}else{ // else, we have all the argument to execute to do what we need				if(createAccess === true){ // if we want to create an access			access = ds.Access.createEntity(); // create a new access entity		}else{ // else we want to modify an access			access = ds.Access(accessID); // get the access to modify		}				access.forum = ds.Forum(forumID); // assigne the given forum to the forum access attribute				// Look if we need to create/modify the access for a group or a user		if(groupAccess === true){ 			access.group = ds.Group(groupOrUserID); // group		}else{			access.user = ds.User(groupOrUserID); // user		}		access.statut = (statut == null) ? 'Member' : statut ; // Assign to the statut attribute, the given statut or "Member" if ommit		access.restricted = (restricted == null) ? false : restricted; // Assign to the restricted attribute, the given restricted or false if ommit						// Construct the query based on the actions given		for(action in actions){			actionQuery += action+'='+actions[action]+' and '; // Concatenate each action and his value		}		actionQuery = actionQuery.substr(0,actionQuery.length-5); // Remove the 5 last characters who represent the last ' and ' that will break the query.				resultAction = ds.Action.find(actionQuery); // Query the action class if we already have the given actions combination				if(resultAction !== null){ // If we find an action			access.action = resultAction; // we assign it to the action acess attribute		}else{						// Else we have to create it						newAction = ds.Action.createEntity();			newAction.read = (actions.read == null) ? false : actions.read;			newAction.write = (actions.write == null) ? false : actions.write;			newAction.del = (actions.del == null) ? false : actions.del;			newAction.modify = (actions.modify == null) ? false : actions.modify;			newAction.vote = (actions.vote == null) ? false : actions.vote;			try{				newAction.save(); // save it			}catch(e){ // catch the error if one occurs				return {error:e.sourceId,errorMessage:e.message};			}			access.action = newAction; // we assign it to the action acess attribute		}		try{			access.save(); // save the access		} catch (e){ // catch the error if one occurs			return {error:e.sourceId,errorMessage:e.message};		}		return true; // return true if nothing go wrong	}		};model.Access.methods.createOrModifyAGroupOrUserAccess.scope = 'public';