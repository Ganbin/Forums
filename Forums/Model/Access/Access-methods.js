/*********************Method allow to create or modify an accces for a group or a userArguments :			createAccess : true,false : flag to say to the function if the call is for creation or modification			groupAccess true,false : flag to say to the function if te call is to create a access for a group or a user			forumID : id of the forum			groupOrUserID : id of the group or the user			actions : exemple : {'read':true,'write':false,'del':false,'modify':false,'vote':true} : object having all the actions for this access			restricted : true,false : to defin if this acces is in restriction mode			statut : string : indication of the access (Member or Moderator)			accessID : the id of the acces to modify (only needed for modification)			Return : 	return true if everything is ok, else return an error *********************/model.Access.methods.createOrModifyAGroupOrUserAccess = function(createAccess,groupAccess,forumID,groupOrUserID,actions,restricted,statut,accessID) {		/*		actions : Object with all the actions true or false (exemple : {'read':true,'write':false,'del':false,'modify':false,'vote':true} )	*/		var actionQuery = '',		access,		resultAction,		newAction;		if(forumID == null || groupOrUserID == null || actions == null){		return {error:20,errorMessage:'You must give a forum, a group and some actions!'};	}else{				if(createAccess === true){			access = ds.Access.createEntity();			access.stamp = new Date();		}else{			access = ds.Access(accessID);		}		access.forum = ds.Forum(forumID);				if(groupAccess === true){			access.group = ds.Group(groupOrUserID);		}else{			access.user = ds.User(groupOrUserID);		}		access.statut = (statut == null) ? 'Member' : statut ;		access.restricted = (restricted == null) ? false : restricted;						for(action in actions){			actionQuery += action+'='+actions[action]+' and ';		}		actionQuery = actionQuery.substr(0,actionQuery.length-5);				resultAction = ds.Action.find(actionQuery);				if(resultAction !== null){			access.action = resultAction;		}else{						// If we add actions, we must add some code here \\						newAction = ds.Action.createEntity();			newAction.read = (actions.read == null) ? false : actions.read;			newAction.write = (actions.write == null) ? false : actions.write;			newAction.del = (actions.del == null) ? false : actions.del;			newAction.modify = (actions.modify == null) ? false : actions.modify;			newAction.vote = (actions.vote == null) ? false : actions.vote;			try{				newAction.save();			}catch(e){				return {error:e.sourceId,errorMessage:e.message};			}			access.action = newAction;		}		try{			access.save();		} catch (e){			return {error:e.sourceId,errorMessage:e.message};		}		return true;	}		};model.Access.methods.createOrModifyAGroupOrUserAccess.scope = 'public';