// Custom login listenerfunction customLoginListener(login, password) {    "use strict";     var dsUser = {},        authenticated = false,		theGroupsTemp= [],		theGroups = [],		dataStorage = [],        retObj = {},        result;     if (login === "admin" || login === "dataAdmin") { //pass auth over to wakanda directory        result = false; // return false here mean we want to pass the authentication to the directory    }else{ 	        dsUser = ds.User.find('login = :1 or email = :1', login); // Find the user via the login or the email                if (dsUser !== null){ // if twe find an user in the dataclass             //we found a user with the given login, now auth the password            authenticated = dsUser.validatePassword(password);            if(authenticated === true && dsUser.statut === 'validated'){ // if the authentication is true and the statut of the user is validated								// Look all the groups to store them in the sessionStorage attribute				if(dsUser.allGroups != 'undefined'){					if(dsUser.allGroups.length !== 0){												theGroupsTemp = dsUser.allGroups.toArray('title'); // put all the groups title in a TEMP array, We do this to check if inside we have the dataAdmin group and then add the "Administrateur" group which is the group from the directory to have acces to the data.												for(var i = 0; i <theGroupsTemp.length;i++){ // Loop akll the groups							dataStorage.push(theGroupsTemp[i]['title']); // Populate the dataStorage array which contains all the groups name														if(theGroupsTemp[i]['title'] === 'dataAdmin'){ // Look if the title of the groups is call "dataAdmin"								theGroups = ['Administrateur']; // Then add the "Administrateur" group to the "theGroups" array which is the directory groups related to the data CRUD accesses							}													}											}				}								// If theGroups is empty, we add the "User" directory group for the current user, which is the default group for a normal user				if(theGroups.length == 0){					theGroups = ['User']				}								// populate the return object                retObj =  {                    ID: dsUser.ID, // UUID for the current user (created whith the user ID)                    name: dsUser.login, // name of the current user                    fullName: dsUser.fullName, // full name of the current user                    belongsTo: theGroups, // Array containing the directory groups of the current user					storage:{ // Storage attribute which is accessible via currentSession().storage.								groups:dataStorage, // Groups from the application								userID:dsUser.ID // ID of the user							}                 };	        }else{ // Else, the authentication is false or the statut is not validated				if(dsUser.statut !== 'emailValidated'){ // If the statut is still under waiting for validation					retObj = { // Return the corresponding error	         	       error: 2,	         	       errorMessage: 'Please validate your account. An email was send to your registration email address.'	         	   };				}else{ // else is that the password authnetication is false	         	   retObj = { // Return the corresponding error	         	       error: 3,	         	       errorMessage: 'invalid password'	         	   };				}	        }         	result = retObj; // assign the retObj to the return variable         }else{ // else we don't find no user in the User dataclass			retObj = { // Return the corresponding error         		error: 1,         		errorMessage: 'invalid login'         	};            result = retObj;        }     }    return result;}